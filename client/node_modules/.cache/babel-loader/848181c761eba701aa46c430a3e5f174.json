{"ast":null,"code":"import { sprintf } from 'sprintf-js';\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\n\nexport function spanAllZeroes(s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with each character contained in a <span>\n */\n\nexport function spanAll(s) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const letters = s.split('');\n  return letters.map((n, i) => sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n, i + offset, spanAllZeroes(n)) // XXX Use #base-2 .value-0 instead?\n  ).join('');\n}\n\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\n\n\nexport function spanLeadingZeroes(address) {\n  const groups = address.split(':');\n  return groups.map(g => spanLeadingZeroesSimple(g)).join(':');\n}\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\n\nexport function simpleGroup(addressString) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const groups = addressString.split(':');\n  return groups.map((g, i) => {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return sprintf('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA;AAAA;AAAA;;AAGA,OAAM,SAAUC,aAAV,CAAwBC,CAAxB,EAAiC;AACrC,SAAOA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,8BAAnB,CAAP;AACD;AAED;AAAA;AAAA;;AAGA,OAAM,SAAUC,OAAV,CAAkBF,CAAlB,EAA+C;AAAA,MAAlBG,MAAkB,uEAAD,CAAC;AACnD,QAAMC,OAAO,GAAGJ,CAAC,CAACK,KAAF,CAAQ,EAAR,CAAhB;AAEA,SAAOD,OAAO,CACXE,GADI,CAEH,CAACC,CAAD,EAAIC,CAAJ,KACEV,OAAO,CACL,oDADK,EAELS,CAFK,EAGLC,CAAC,GAAGL,MAHC,EAILJ,aAAa,CAACQ,CAAD,CAJR,CAHN,CAQC;AARD,IAUJE,IAVI,CAUC,EAVD,CAAP;AAWD;;AAED,SAASC,uBAAT,CAAiCC,KAAjC,EAA8C;AAC5C,SAAOA,KAAK,CAACV,OAAN,CAAc,OAAd,EAAuB,8BAAvB,CAAP;AACD;AAED;AAAA;AAAA;;;AAGA,OAAM,SAAUW,iBAAV,CAA4BC,OAA5B,EAA2C;AAC/C,QAAMC,MAAM,GAAGD,OAAO,CAACR,KAAR,CAAc,GAAd,CAAf;AAEA,SAAOS,MAAM,CAACR,GAAP,CAAYS,CAAD,IAAOL,uBAAuB,CAACK,CAAD,CAAzC,EAA8CN,IAA9C,CAAmD,GAAnD,CAAP;AACD;AAED;AAAA;AAAA;AAAA;;AAIA,OAAM,SAAUO,WAAV,CAAsBC,aAAtB,EAA+D;AAAA,MAAlBd,MAAkB,uEAAD,CAAC;AACnE,QAAMW,MAAM,GAAGG,aAAa,CAACZ,KAAd,CAAoB,GAApB,CAAf;AAEA,SAAOS,MAAM,CAACR,GAAP,CAAW,CAACS,CAAD,EAAIP,CAAJ,KAAS;AACzB,QAAI,WAAWU,IAAX,CAAgBH,CAAhB,CAAJ,EAAwB;AACtB,aAAOA,CAAP;AACD;;AAED,WAAOjB,OAAO,CACZ,8CADY,EAEZU,CAAC,GAAGL,MAFQ,EAGZO,uBAAuB,CAACK,CAAD,CAHX,CAAd;AAKD,GAVM,CAAP;AAWD","names":["sprintf","spanAllZeroes","s","replace","spanAll","offset","letters","split","map","n","i","join","spanLeadingZeroesSimple","group","spanLeadingZeroes","address","groups","g","simpleGroup","addressString","test"],"sources":["../../../../lib/v6/helpers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
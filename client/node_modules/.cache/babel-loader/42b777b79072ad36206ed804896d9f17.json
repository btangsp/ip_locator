{"ast":null,"code":"import * as v6 from './constants';\nimport { sprintf } from 'sprintf-js';\nexport function groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\nexport function padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\nexport const ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';\nexport function simpleRegularExpression(groups) {\n  const zeroIndexes = [];\n  groups.forEach((group, i) => {\n    const groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  }); // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n\n  const possibilities = zeroIndexes.map(zeroIndex => groups.map((group, i) => {\n    if (i === zeroIndex) {\n      const elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n      return groupPossibilities([padGroup(group), elision]);\n    }\n\n    return padGroup(group);\n  }).join(':')); // The simplest case\n\n  possibilities.push(groups.map(padGroup).join(':'));\n  return groupPossibilities(possibilities);\n}\nexport function possibleElisions(elidedGroups, moreLeft, moreRight) {\n  const left = moreLeft ? '' : ':';\n  const right = moreRight ? '' : ':';\n  const possibilities = []; // 1. elision of everything (::)\n\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  } // 2. complete elision of the middle\n\n\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if (moreRight && !moreLeft || !moreRight && moreLeft) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  } // 4. elision from the left side\n\n\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1)); // 5. elision from the right side\n\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right)); // 6. no elision\n\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1)); // 7. elision (including sloppy elision) from the middle\n\n  for (let groups = 1; groups < elidedGroups - 1; groups++) {\n    for (let position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}","map":{"version":3,"mappings":"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","names":["v6","sprintf","groupPossibilities","possibilities","join","padGroup","group","length","ADDRESS_BOUNDARY","simpleRegularExpression","groups","zeroIndexes","forEach","i","groupInteger","parseInt","push","map","zeroIndex","elision","GROUPS","possibleElisions","elidedGroups","moreLeft","moreRight","left","right","position"],"sources":["../../../../lib/v6/regular-expressions.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simpleGroup = exports.spanLeadingZeroes = exports.spanAll = exports.spanAllZeroes = void 0;\n\nvar sprintf_js_1 = require(\"sprintf-js\");\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\n\n\nfunction spanAllZeroes(s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\n\nexports.spanAllZeroes = spanAllZeroes;\n/**\n * @returns {String} the string with each character contained in a <span>\n */\n\nfunction spanAll(s, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  var letters = s.split('');\n  return letters.map(function (n, i) {\n    return sprintf_js_1.sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n, i + offset, spanAllZeroes(n));\n  } // XXX Use #base-2 .value-0 instead?\n  ).join('');\n}\n\nexports.spanAll = spanAll;\n\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\n\n\nfunction spanLeadingZeroes(address) {\n  var groups = address.split(':');\n  return groups.map(function (g) {\n    return spanLeadingZeroesSimple(g);\n  }).join(':');\n}\n\nexports.spanLeadingZeroes = spanLeadingZeroes;\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\n\nfunction simpleGroup(addressString, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  var groups = addressString.split(':');\n  return groups.map(function (g, i) {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return sprintf_js_1.sprintf('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n  });\n}\n\nexports.simpleGroup = simpleGroup;","map":{"version":3,"mappings":"AAAA;;;;;;;AAAA;AAEA;AAAA;AAAA;;;AAGA,SAAgBA,aAAhB,CAA8BC,CAA9B,EAAuC;AACrC,SAAOA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,8BAAnB,CAAP;AACD;;AAFDC;AAIA;AAAA;AAAA;;AAGA,SAAgBC,OAAhB,CAAwBH,CAAxB,EAAmCI,MAAnC,EAAqD;AAAlB;AAAAA;AAAkB;;AACnD,MAAMC,OAAO,GAAGL,CAAC,CAACM,KAAF,CAAQ,EAAR,CAAhB;AAEA,SAAOD,OAAO,CACXE,GADI,CAEH,UAACC,CAAD,EAAIC,CAAJ,EAAK;AACH,gCACE,oDADF,EAEED,CAFF,EAGEC,CAAC,GAAGL,MAHN,EAIEL,aAAa,CAACS,CAAD,CAJf;AAKC,GARA,CAQC;AARD,IAUJE,IAVI,CAUC,EAVD,CAAP;AAWD;;AAdDR;;AAgBA,SAASS,uBAAT,CAAiCC,KAAjC,EAA8C;AAC5C,SAAOA,KAAK,CAACX,OAAN,CAAc,OAAd,EAAuB,8BAAvB,CAAP;AACD;AAED;AAAA;AAAA;;;AAGA,SAAgBY,iBAAhB,CAAkCC,OAAlC,EAAiD;AAC/C,MAAMC,MAAM,GAAGD,OAAO,CAACR,KAAR,CAAc,GAAd,CAAf;AAEA,SAAOS,MAAM,CAACR,GAAP,CAAW,UAACS,CAAD,EAAE;AAAK,kCAAuB,CAACA,CAAD,CAAvB;AAA0B,GAA5C,EAA8CN,IAA9C,CAAmD,GAAnD,CAAP;AACD;;AAJDR;AAMA;AAAA;AAAA;AAAA;;AAIA,SAAgBe,WAAhB,CAA4BC,aAA5B,EAAmDd,MAAnD,EAAqE;AAAlB;AAAAA;AAAkB;;AACnE,MAAMW,MAAM,GAAGG,aAAa,CAACZ,KAAd,CAAoB,GAApB,CAAf;AAEA,SAAOS,MAAM,CAACR,GAAP,CAAW,UAACS,CAAD,EAAIP,CAAJ,EAAK;AACrB,QAAI,WAAWU,IAAX,CAAgBH,CAAhB,CAAJ,EAAwB;AACtB,aAAOA,CAAP;AACD;;AAED,WAAOI,qBACL,8CADK,EAELX,CAAC,GAAGL,MAFC,EAGLO,uBAAuB,CAACK,CAAD,CAHlB,CAAP;AAKD,GAVM,CAAP;AAWD;;AAdDd","names":["spanAllZeroes","s","replace","exports","spanAll","offset","letters","split","map","n","i","join","spanLeadingZeroesSimple","group","spanLeadingZeroes","address","groups","g","simpleGroup","addressString","test","sprintf_js_1"],"sources":["../../../../lib/v6/helpers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}